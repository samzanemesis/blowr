// Created by inigo quilez - iq/2013
// Modified by Samuel Pavlovic
// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.

// Volumetric clouds. It performs level of detail (LOD) for faster rendering

//THIS NOISE IS SUPER DUPER SLOW
float iqhash( float n )
{
    return fract(sin(n)*43758.5453);
}

float noise( vec3 x )
{
    // The noise function returns a value in the range -1.0f -> 1.0f
    vec3 p = floor(x);
    vec3 f = fract(x);

    f       = f*f*(3.0-2.0*f);
    float n = p.x + p.y*57.0 + 113.0*p.z;
    return mix(mix(mix( iqhash(n+0.0  ), iqhash(n+1.0  ),f.x),
                   mix( iqhash(n+57.0 ), iqhash(n+58.0 ),f.x),f.y),
               mix(mix( iqhash(n+113.0), iqhash(n+114.0),f.x),
                   mix( iqhash(n+170.0), iqhash(n+171.0),f.x),f.y),f.z);
}
//THIS NOISE IS SUPER DUPER SLOW

#define POS vec3( 0,  iTime * 0.1 , iTime ) * 0.1


float map5( in vec3 p )
{
	vec3 q = p - vec3(0.0,0.1,1.0) + POS;
	float f;
    f  = 0.50000*noise( q ); q = q*2.02;
    f += 0.25000*noise( q ); q = q*2.03;
    f += 0.12500*noise( q ); q = q*2.01;
    f += 0.06250*noise( q ); q = q*2.02;
    f += 0.03125*noise( q );
	return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
}

float map4( in vec3 p )
{
	vec3 q = p - vec3(0.0,0.1,1.0) + POS;
	float f;
    f  = 0.50000*noise( q ); q = q*2.02;
    f += 0.25000*noise( q ); q = q*2.03;
    f += 0.12500*noise( q ); q = q*2.01;
    f += 0.06250*noise( q );
	return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
}
float map3( in vec3 p )
{
	vec3 q = p - vec3(0.0,0.1,1.0) + POS;
	float f;
    f  = 0.50000*noise( q ); q = q*2.02;
    f += 0.25000*noise( q ); q = q*2.03;
    f += 0.12500*noise( q );
	return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
}
float map2( in vec3 p )
{
	vec3 q = p - vec3(0.0,0.1,1.0) + POS;
	float f;
    f  = 0.50000*noise( q ); q = q*2.02;
    f += 0.25000*noise( q );;
	return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
}

float map1( in vec3 p )
{
	vec3 q = p - vec3(0.0,0.1,1.0) + POS;
	float f;
    f  = 0.50000*noise( q ); q = q*2.02;
	return clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );
}

vec3 sundir = normalize( vec3(1.0,1.0,0.0) );
#define SUNCOLOR vec3(1.0, 1.0, 1.0)

float rand(vec2 co)
{// implementation found at: lumina.sourceforge.net/Tutorials/Noise.html
	return fract(sin(dot(co*0.123,vec2(12.9898,78.233))) * 43758.5453);
}

vec4 integrate( in vec4 sum, in float dif, in float den, in vec3 bgcol, in float t )
{
    // lighting
    vec3 lin = vec3(0.65,0.7,0.75)*1.4 + SUNCOLOR*dif;        
    vec4 col = vec4( mix( vec3(1.0,0.95,0.8), vec3(0.25,0.3,0.35), den ), den );
    
    col.xyz *= lin;
    col.xyz = mix( col.xyz, bgcol, 1.0-exp(-0.003*t*t) );
    // front to back blending    
    col.a *= 0.5;
    col.rgb *= col.a;
    return sum + col*(1.0-sum.a);
}

#define CLOUDDENSITY 0.0
#define MARCH(STEPS,MAPLOD) for(int i=0; i<STEPS; i++) { vec3 pos = rotation + t*rotationDirection; if( sum.a > 0.99 ) break;  float den = MAPLOD( pos ); /*Upper cut*/ float den2 = MAPLOD( pos + vec3(0,CLOUDDENSITY,10) ); if( den > den2 ){  if( den>0.01 ) {  float dif = clamp((den - MAPLOD(pos+0.3*sundir))/0.6, 0.0, 1.0 );  sum = integrate( sum, dif, den, bgcol, t ); } }else{ sum.a *= 1.0005; } t += max(0.05,0.03*t);  }

#define STEPS 100
#define MAPLOD map5

vec4 raymarch( in vec3 rotation, in vec3 rotationDirection, in vec3 bgcol, in ivec2 px, in float t )
{
	vec4 sum = vec4(0.0);

    
	//float t = 0.0;//0.05*texelFetch( iChannel0, px&255, 0 ).x;

    MARCH(30,map5);
    //
    MARCH(30,map4);
    
    MARCH(30,map3);
    
    MARCH(30,map2);
    
    //MARCH(30,map1);
    
    
    /*for(int i=0; i<STEPS; i++)
	{ 
        vec3  pos = rotation + t*rotationDirection; 
        if( sum.a > 0.99 ) 
            break; 
        
        float den = MAPLOD( pos );
        
        //Upper cut
        float den2 = MAPLOD( pos + vec3(0,CLOUDDENSITY,10) );
        
        if( den > den2 ){       
            if( den>0.01 ) 
            { 
                float dif =  clamp((den - MAPLOD(pos+0.3*sundir))/0.6, 0.0, 1.0 ); 
                sum = integrate( sum, dif, den, bgcol, t ); 
            } 
        }else{
            sum.a *= 1.005;
        }
        t += max(0.05,0.03*t); 
	}*/
    
    //for(int i=0; i<STEPS; i++) { vec3 pos = rotation + t*rotationDirection; if( sum.a > 0.99 ) break;  float den = MAPLOD( pos ); /*Upper cut*/ float den2 = MAPLOD( pos + vec3(0,CLOUDDENSITY,10) ); if( den > den2 ){  if( den>0.01 ) {  float dif = clamp((den - MAPLOD(pos+0.3*sundir))/0.6, 0.0, 1.0 );  sum = integrate( sum, dif, den, bgcol, t ); } }else{ sum.a *= 1.005; } t += max(0.05,0.02*t);  }

    return clamp( sum, 0.0, 1.0 );
}

mat3 setCamera( in vec3 rotation, in vec3 ta, float cr )
{
	vec3 cw = normalize(ta-rotation);
	vec3 cp = vec3(sin(cr), cos(cr),0.0);
	vec3 cu = normalize( cross(cw,cp) );
	vec3 cv = normalize( cross(cu,cw) );
    return mat3( cu, cv, cw );
}

vec4 render( in vec3 rotation, in vec3 rotationDirection, in ivec2 px, in float t)
{    
	float sun = clamp( dot(sundir,rotationDirection), 0.0, 1.0 );
    
    //Background
	//vec3 col = rotationDirection;
    vec3 col = texture(iChannel1,rotationDirection).xyz;
   
    

    // clouds    
    vec4 res = raymarch( rotation, rotationDirection, col, px, t );
    col = col*(1.0-res.w) + res.xyz;
    

    return vec4( col, 1.0 );
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)/ iResolution.y;

    vec2 m = (iMouse.xy/iResolution.xy)*4.0 - 2.0;
    
    // camera
    vec3 rotation = 4.0*normalize(vec3(sin(3.0*m.x), 0.4*m.y, cos(3.0*m.x)));
	vec3 ta = vec3(0.0, -1.0, 0.0);
    mat3 ca = setCamera( rotation, ta, 0.0 );
    // ray
    vec3 rotationDirection = ca * normalize( vec3(p.xy,1.5));
    
    vec2 pos1 = ( fragCoord.xy / iResolution.xy );
    vec2 seed = pos1 + fract(iTime);
    float t=(1.+0.03*rand(seed*vec2(1)));
    
    fragColor = render( rotation, rotationDirection, ivec2(fragCoord-0.5), t );
}
